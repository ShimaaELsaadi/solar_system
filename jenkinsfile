pipeline {
    agent any

    environment {
        DOCKER_HUB_REPO = 'shaimaamelsaadi/solar_system'
        DOCKER_HUB_CREDENTIALS = 'dockerhub-credentials'
        DOCKER_IMAGE_TAG = 'latest'
        EMAIL_RECIPIENTS = 'shimaaelsaadi@gmail.com' 
       // AWS_CREDENTIALS = credentials('aws-credentials-id')
        // SSH_KEY = credentials('ssh-key-id')
        //DB_CREDENTIALS = credentials('db-credentials-id')
    }

    stages {
        stage('Cleanup') {
            steps {
                deleteDir()
            }
        }
        stage('Prepare Jenkins Inputs') {
            steps {
                echo 'Preparing Jenkins inputs...'

            }
        }
        stage('Checkout Code') {
            steps {
                git branch: 'feature/exploring-workflow', url: 'https://github.com/ShimaaELsaadi/solar_system'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('Run Unit Tests') {
            steps {
                
                sh 'npm test'
                
            }
        }
        stage('Run Code Coverage') {
            steps {
                
                sh 'npm run coverage'
                publishHTML target: [
                     reportName: 'Coverage Report',
                     reportDir: 'coverage',
                     reportFiles: 'index.html',
                     alwaysLinkToLastBuild: true
                ]
            }
        }
         stage('Prepare Docker Image') {
            steps {
                script {
                    sh '''
                    cd $WORKSPACE
                    
                    # Check if the Docker image exists
                    IMAGE_EXISTS=$(docker images -q $DOCKER_HUB_REPO:$DOCKER_IMAGE_TAG)
                    
                    if [ -n "$IMAGE_EXISTS" ]; then
                        echo "Docker image exists. Deleting existing image..."
                        docker rmi $DOCKER_HUB_REPO:$DOCKER_IMAGE_TAG
                    else
                        echo "Docker image does not exist. Proceeding to build a new image..."
                    fi
                    '''
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                    cd $WORKSPACE
                    docker build -t $DOCKER_HUB_REPO:$DOCKER_IMAGE_TAG .
                    '''
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_HUB_CREDENTIALS}", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                }
                 def app = docker.image("$DOCKER_HUB_REPO:$DOCKER_IMAGE_TAG")
                 app.push()
            }
        }
        }
        stage('Test Docker Container') {
            steps {
        script {
            def dockerImage = docker.build("$DOCKER_HUB_REPO:$DOCKER_IMAGE_TAG")
            dockerImage.run('-d -p 3000:3000')
            sh 'sleep 5' 
            sh 'curl http://localhost:3000'
        }
    }
}
}
           
    post{

            failure {
                mail to: "${EMAIL_RECIPIENTS}",
                    subject: "❌ Build Failed: ${JOB_NAME} - Build #${BUILD_NUMBER}",
                    body: """<p>Oops! The build has failed.</p>
                          <p><strong>Job:</strong> ${JOB_NAME}</p>
                          <p><strong>Build Number:</strong> ${BUILD_NUMBER}</p>
                          <p>Check the console output at <a href="${BUILD_URL}">${BUILD_URL}</a></p>""",
                    mimeType: 'text/html'
                
        }

        unstable {
            mail to: "${EMAIL_RECIPIENTS}",
                 subject: "⚠️ Build Unstable: ${JOB_NAME} - Build #${BUILD_NUMBER}",
                 body: """<p>The build is unstable.</p>
                          <p><strong>Job:</strong> ${JOB_NAME}</p>
                          <p><strong>Build Number:</strong> ${BUILD_NUMBER}</p>
                          <p>Check the console output at <a href="${BUILD_URL}">${BUILD_URL}</a></p>""",
                 mimeType: 'text/html'
                
        }
    }

}
